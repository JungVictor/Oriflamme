#include utils
#include actions/_actions
#include mechanics/_mechanics

EliminatedCards = {
    ["White"] = {},
    ["Red"] = {},
    ["Blue"] = {},
    ["Yellow"] = {},
    ["Green"] = {}
}

Resources = {
    ["CardsBack"] = {
        ["White"] = "http://cloud-3.steamusercontent.com/ugc/1651096442108582590/7119E93B5101C3DEEA2BB84A8AD694CAF9A0EE8A/",
        ["Red"] = "",
        ["Blue"] = "",
        ["Yellow"] = "",
        ["Green"] = "",
    },
    ["CardsImages"] = {
        ["White"] = {
            "http://cloud-3.steamusercontent.com/ugc/1925880224379585823/91DBE7C8D077F129D69B9B47007F3EF3066E0D93/",
            "http://cloud-3.steamusercontent.com/ugc/1925880579003259294/2E363D794DFAAB0659F1ACFCA93874A09EC765BD/",
            "http://cloud-3.steamusercontent.com/ugc/1925880224379611031/CD316461EA56F0CB7A3D1D8A5416BFB48ED11F8E/",
            "http://cloud-3.steamusercontent.com/ugc/1975421824214407818/8773E35AD0CCF0BA575CA3724C0B5ACF24DE8432/",
        },
        ["Red"] = {
            "http://cloud-3.steamusercontent.com/ugc/1925880224379587054/48EBE1721A3C8D800FB7C83FF9ADC9814AEF40BA/",
            "http://cloud-3.steamusercontent.com/ugc/1925880579003265873/48E88F61B21521238A9397EDCB4ACB975A790A9E/",
            "http://cloud-3.steamusercontent.com/ugc/1925880224379612554/AA383C79D5C78DE4803718FB1A11C5D0556D4D97/",
            "http://cloud-3.steamusercontent.com/ugc/1975421824214409218/D91562640EFB3741041DC37106E58B0502E01330/",
        },
        ["Blue"] = {
            "http://cloud-3.steamusercontent.com/ugc/1925880224379559628/DC497272243A6437C86406ADF3FF14B202345EC4/",
            "http://cloud-3.steamusercontent.com/ugc/1925880579003264419/894CB957DEB32B7036F86E3E76855367D4D0D3B6/",
            "http://cloud-3.steamusercontent.com/ugc/1925880224379564043/80C223350E2F948075706E71E9F15DADF2FC06E0/",
            "http://cloud-3.steamusercontent.com/ugc/1975421824214412242/168D36382218FC4BCB06509A59326A1F689674CA/",
        },
        ["Yellow"] = {
            "http://cloud-3.steamusercontent.com/ugc/1925880224379584522/FA8703680EE6B2A1987F85F99BB6FA7379886738/",
            "http://cloud-3.steamusercontent.com/ugc/1925880579003263566/A5606740099C667B2545A8443837EE6898AECD9B/",
            "http://cloud-3.steamusercontent.com/ugc/1925880224379609558/98BB664C53C5A7009BE1F53A0FD2D32736A48943/",
            "http://cloud-3.steamusercontent.com/ugc/1975421824214410160/113C718E96C6D878AD62E30A31FADB1D22B3AFBE/",
        },
        ["Green"] = {
            "http://cloud-3.steamusercontent.com/ugc/1925880224379580096/95D92D84B70A7090A893FFD4A81BC855C92CBAD2/",
            "http://cloud-3.steamusercontent.com/ugc/1925880579003265266/D18F6087B2BE9B296A74ABAEA583C64CB15426F9/",
            "http://cloud-3.steamusercontent.com/ugc/1925880224379608456/3F0BDB7F467636EB2BD84D9584044ABF2DB302B1/",
            "http://cloud-3.steamusercontent.com/ugc/1975421824214411109/361036DF40FE7044B971150D610AC17D4A018852/",
        }
    }
}

EXT_SIZE = {
    {5,2,10},
    {6,2,12},
    {6,2,12},
    {5,2,10}
}

-- Carte -> Extension
EXT_REVERSE = {}

-- Extension -> Cartes
EXT = {
    -- [1] Base
    { Archer, Assassinat, Changeforme, Complot, Decret_Royal,
      Embuscade, Espion, Heritier, Seigneur, Soldat },
    -- [2] Embrasement
    { Apothicaire, Corruption, Coupe_Jarret, Guet_apens, Machination,
      Prince, Usurpation, Reine, Felon, Intriguante, Generale },
    -- [3] Rédemption (custom)
    { Agent_Double, Croise, Fossoyeur, Infiltrateur, Joker, Arbaletrier,
      Martyr, Pot_de_vin, Pretre, Resurrection, Vol_a_la_tire,
      Paladine },
    -- [4] Alliance
    { Deserteur, Diplomate, Extorsion, Imperatrice, Infiltration,
      Informatrice, Insurrection, Magistrat, Negoce, Zelote }
}

TOKENS = { Jumeau }

NAME_TO_SCRIPT = {}
ACCEPTED = {}

--#include sort_name
function onLoad_init()

    -- Place le décors (la chambre)
    local room = getObjectFromGUID("bca721")
    room.setPosition(vector(0, -35.780262, 29.028465))
    room.setRotation(vector(0, 0, 0))
    room.interactable = false

    --sort_name() -- <- Pour initialiser les cartes avec leur nom
    REF = {getObjectFromGUID("f531bb"), getObjectFromGUID("d790ea"), getObjectFromGUID("fb074b"), getObjectFromGUID("be4b9c")}
    local default_value = {false, true, false, false}
    for e = 1, #EXT do
        ACCEPTED[e] = {}
        for i = 0, #EXT[e]-1 do
            ACCEPTED[e][i+1] = default_value[e]
            EXT_REVERSE[EXT[e][i+1].name] = e
            if REF[e] then
            REF[e].createButton(_create_toggle(EXT[e][i+1], i+1, i % 3,  math.floor(i / 3), REF, e, default_value[e]))
            end
        end
    end
    for key, value in pairs(joueur) do
        local params = {}
        params.position = joueur[key].corruption.getPosition()
        params.rotation = joueur[key].corruption.getRotation()
        joueur[key].corruption_pos = params
    end
end

function effect_togglecard(card, name, i, ref, e)
    ACCEPTED[e][i] = not ACCEPTED[e][i]
    local color = "Green"
    if not ACCEPTED[e][i] then color = "Red" end
    ref[e].editButton({index = i-1, color = color})
end

function _create_toggle(card, i, x, y, ref, e, val)
    local color = "Green"
    if not val then color = "Red" end
    return {
        label = card.name,
        click_function = effect_action("togglecard", card, card.name, i, ref, e),
        function_owner = Global,
        position = {-5 + x*5, 0.6, -5 + y*3},
        tooltip = card.description,
        rotation = {0, 0},
        width = 1800,
        height = 800,
        font_size = 300,
        font_color = "White",
        color = color
    }
end

--[[---------------
    DISTRIBUTION
-----------------]]

function generatePiles()
    local piles = { {}, {}, {}, {}, {} }
    for e = 1, #EXT do
        for i, card in pairs(EXT[e]) do
            if ACCEPTED[e][i] then
                table.insert(piles[card.type], card)
            end
        end
        if REF[e] then REF[e].destruct() end
    end
    return piles
end

function initHUD()
    UI.hide("CardName")
    MOVE_CARDS_TO_RIGHT = vector(4.04, 0, 0)
    MOVE_CARDS_TO_LEFT = vector(-4.04, 0, 0)
end

function generateDeck(piles)
    EXEMPLAIRES = {1,1,2,2,4}
    filtered = {}
    for i, cards in pairs(piles) do
        local j = 1
        picked = {}
        while j <= EXEMPLAIRES[i] do
            local random = math.random(#cards)
            if random > 0 then
                local card = cards[random]
                table.insert(filtered, card.name)
                table.insert(picked, card)
                table.remove(cards, random)
            end
            j = j + 1
        end
        for _, card in pairs(picked) do table.insert(cards, card) end
    end


    -- Si le croisé est présent sans jeton bénédiction
    local croise = false
    local bless = false

    for i, name in pairs(filtered) do
        if name == Croise.name then croise = true end
        if name == Paladine.name or name == Pretre.name then bless = true end
    end

    if croise and not bless then
        local rand = math.random(0,1)
        if rand == 0 then table.insert(filtered, Paladine.name)
        else table.insert(filtered, Pretre.name) end
    end

    return filtered
end


GLOBAL_CARD_ID_COUNTER = 1
function distribution(joueur, player_colors)
    local piles = generatePiles()
    local ACCEPTED_CARDS = generateDeck(piles)
    for value, key in pairs(player_colors) do
        local deck = joueur[key].deck
        local objets = deck.getObjects()
        local destructed = 0
        for i, obj in pairs(objets) do
            local card = deck.takeObject({index=#objets-destructed-1})

            if has_value(ACCEPTED_CARDS, card.getName()) then
                GLOBAL_CARD_ID_COUNTER = GLOBAL_CARD_ID_COUNTER + 1
                card.memo = GLOBAL_CARD_ID_COUNTER
                Card.linkID(card.memo, card.getName(), key)
                deck.putObject(card)
            else destructed = destructed + 1 end
            card.destruct()
        end
    end

    -- distribuer les cartes cachées
    for key, color in pairs(player_colors) do
        joueur[color].deck.shuffle()
        influence_1.takeObject(getPointsPosition(color))

        local destructed = 0
        local objets = joueur[color].deck.getObjects()

        for i, obj in ipairs(objets) do
            if #objets - destructed > 7 then
                local card = joueur[color].deck.takeObject({index=#objets-destructed-1})
                destructed = destructed + 1
                card.destruct()
            else
                if not joueur[color].starting_hand then joueur[color].starting_hand = {} end
                table.insert(joueur[color].starting_hand, Card.getScript(obj.name))
            end
        end

        joueur[color].deck.deal(7,color)
    end
end

function initDeal(joueur, player_colors)
    for e = 1, #EXT do
        for _, card in pairs(EXT[e]) do
            NAME_TO_SCRIPT[card.name] = card
        end
    end
    for _, card in pairs(TOKENS) do
        NAME_TO_SCRIPT[card.name] = card
    end

    distribution(joueur, player_colors)
end


--[[---------------
    CALL TO FILE
-----------------]]

function getFileTable()
    return zoneFile.call("getFileTable")
end

function getReserveTable()
    return zoneFile.call("getReserveTable")
end

function offsetSmoothMove(i, offset)
    return zoneFile.call("offsetSmoothMove",{i=i, offset=offset, corruption=Corrupted, joueurs=joueur})
end

function givePointsOnCardTo(card, player)
    return zoneFile.call("giveAllPointsToPlayer", {card=card, pos=getPointsPosition(player)})
end

function giveAllPointsToPlayer(i, player)
    return zoneFile.call("giveAllPointsToPlayer", {i=i, pos=getPointsPosition(player)})
end

function giveNPointsToPlayer(i, player, n)
    return zoneFile.call("giveNPointsToPlayer", {i=i, n=n, pos=getPointsPosition(player)})
end

function isBlessingInGame(color)
    return zoneFile.call("isBlessingInGame") or zoneFile.call("isPaladinInGame", {color=color})
end
